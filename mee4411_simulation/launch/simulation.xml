<launch>
    <arg name="model"
         default="$(env TURTLEBOT3_MODEL)"
         description="model type [burger, waffle, waffle_pi]"/>
    <arg name="initial_pose_x"
         default="0.0"
         description="initial x position of the robot"/>
    <arg name="initial_pose_y"
         default="0.0"
         description="initial y position of the robot"/>
    <arg name="initial_pose_a"
         default="0.0"
         description="initial angle of the robot"/>
    <arg name="joint_noise_std"
         default="0.0"
         description="standard deviation of wheel noise per second"/>
    <arg name="sim_namespace"
         default="ground_truth/"
         description="namespace for `real` simulated robot" />
    <arg name="yaml_filename"
         default="$(find-pkg-share occupancy_grid)/maps/levine-4.yaml"
         description="YAML file for the map"/>

    <!-- Map -->
    <include file="$(find-pkg-share occupancy_grid)/launch/map_server.py">
        <arg name="yaml_filename" value="$(var yaml_filename)"/>
        <arg name="delay" value="5.0"/>
    </include>

     <!-- Robot file -->
     <let name="urdf"
          value="$(find-pkg-share turtlebot3_description)/urdf/turtlebot3_$(env TURTLEBOT3_MODEL).urdf"/>

    <!-- Simulated Robot -->
    <group>
        <push-ros-namespace namespace="$(var sim_namespace)"/>
        <include file="$(find-pkg-share mee4411_simulation)/launch/tb3_simulation.xml">
            <arg name="sim_namespace"   value="$(var sim_namespace)" />
            <arg name="initial_pose_x"  value="$(var initial_pose_x)" />
            <arg name="initial_pose_y"  value="$(var initial_pose_y)" />
            <arg name="initial_pose_a"  value="$(var initial_pose_a)" />
            <arg name="joint_noise_std" value="$(var joint_noise_std)" />
        </include>
    </group>

    <!-- Transformations -->
    <node name="robot_state_publisher"
          pkg="robot_state_publisher"
          exec="robot_state_publisher"
          output="screen">
        <param name="publish_frequency" value="50.0" />
        <param name='robot_description' value="$(command 'xacro $(var urdf)')"/>
    </node>

    <!-- Odometry -->
    <node name="turtlebot3_fake_node"
          pkg="turtlebot3_fake_node"
          exec="turtlebot3_fake_node"
          output="screen">
        <param from="$(find-pkg-share turtlebot3_fake_node)/param/$(env TURTLEBOT3_MODEL).yaml"/>
    </node>

    <!-- Localization -->
    <node name="map_odom_tf"
          pkg="tf2_ros"
          exec="static_transform_publisher" 
          args="--x $(var initial_pose_x)
                --y $(var initial_pose_y)
                --yaw $(var initial_pose_a)
                --frame-id /map 
                --child-frame-id /odom" />

    <!-- Global planning -->

    <!-- Local controller -->

    <!-- Collision detection -->
    <include file="$(find-pkg-share mee4411_simulation)/launch/collision_detector.py"/>

    <!-- Robot visualization -->
    <node name="rviz"
          pkg="rviz2"
          exec="rviz2"
          args="-d $(find-pkg-share mee4411_simulation)/rviz/mee4411.rviz"/>

</launch>
